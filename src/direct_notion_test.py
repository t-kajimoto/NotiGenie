# src/direct_notion_test.py
import os
from dotenv import load_dotenv
from notion_client import Client, APIResponseError

# --------------------------------------------------------------------------
# 1. 環境変数の読み込み
# --------------------------------------------------------------------------
# .envファイルに記述された "KEY=VALUE" 形式の変数を環境変数として読み込む。
# これにより、APIキーをスクリプトに直接書き込む必要がなくなる。
load_dotenv()

# os.getenvを使って、環境変数 "NOTION_API_KEY" の値を取得する。
api_key = os.getenv("NOTION_API_KEY")

# APIキーが読み込めたかを確認
if not api_key:
    print("エラー: .envファイルにNOTION_API_KEYが設定されていません。")
else:
    # --------------------------------------------------------------------------
    # 2. APIキーの確認とクライアントの初期化
    # --------------------------------------------------------------------------
    # セキュリティのため、読み込んだキーの全体は表示せず、一部だけを表示して確認する。
    if len(api_key) > 11:
        print(f"読み込まれたAPIキーの確認: {api_key[:7]}...{api_key[-4:]}")
    else:
        print("読み込まれたAPIキーは非常に短いです。")

    # 取得したAPIキーを使って、Notion APIと通信するためのクライアントを初期化する。
    notion = Client(auth=api_key)
    print("Notionクライアントを初期化しました。")
    print("ワークスペースを検索して、APIキーの有効性をテストします...")

    # --------------------------------------------------------------------------
    # 3. API呼び出しと例外処理
    # --------------------------------------------------------------------------
    try:
        # notion.search()は、連携が許可されたページやデータベースを検索する、最も基本的なAPI呼び出し。
        # 認証が通るかどうかのテストに利用できる。
        notion.search()
        print("\n[SUCCESS] APIキーは有効で、Notionへの接続に成功しました！")

    # APIResponseErrorは、Notion APIからエラー応答(ステータスコード400番台など)が返された場合に発生する例外。
    except APIResponseError as e:
        print(f"\n[FAILED] Notion APIからエラーが返されました。")
        # 例外オブジェクトe自体に、エラーコードやメッセージが含まれている。
        print(f"エラー詳細: {e}")
        print("\n再度、APIキーと、インテグレーションを共有したいページやデータベースの「コネクト設定」を確認してください。")

    # その他の予期せぬエラーをキャッチする。
    except Exception as e:
        print(f"予期せぬエラーが発生しました: {e}")